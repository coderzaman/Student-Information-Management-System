/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package StudentManagement;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Aktaruzzaman
 */
public class AddCourse extends javax.swing.JFrame {

    boolean checkReadyForDatabese = false;
    Connection connection;
    MainPage mainPage;
    boolean subjectAddChecker = false;


    /**
     * Creates new form AdCourse
     */
    public AddCourse() {
        initComponents();
        setResizable(false);
        this.setSize(1200, 700);
        mainPage = new MainPage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        backBtnFromDelete = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        logOutBtn1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        deleteStudentText = new javax.swing.JLabel();
        selectDeptForCourse = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        selectSemForCourse = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        AddCourseBtn = new javax.swing.JButton();
        selectYearForCourse = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        selectIntakeForCourse = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Course");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel11.setBackground(new java.awt.Color(0, 204, 0));
        jPanel11.setFocusCycleRoot(true);
        jPanel11.setFocusable(false);
        jPanel11.setPreferredSize(new java.awt.Dimension(115, 45));

        backBtnFromDelete.setBackground(new java.awt.Color(0, 153, 204));
        backBtnFromDelete.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backBtnFromDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back.png"))); // NOI18N
        backBtnFromDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backBtnFromDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backBtnFromDeleteMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addComponent(backBtnFromDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backBtnFromDelete)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(0, 204, 0));
        jPanel5.setPreferredSize(new java.awt.Dimension(115, 45));

        logOutBtn1.setBackground(new java.awt.Color(0, 153, 204));
        logOutBtn1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logOutBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logout.png"))); // NOI18N
        logOutBtn1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logOutBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logOutBtn1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addComponent(logOutBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logOutBtn1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addCoursePage.png"))); // NOI18N

        deleteStudentText.setBackground(new java.awt.Color(0, 204, 255));
        deleteStudentText.setFont(new java.awt.Font("Showcard Gothic", 0, 36)); // NOI18N
        deleteStudentText.setForeground(new java.awt.Color(0, 204, 0));
        deleteStudentText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteStudentText.setText("Add course");

        selectDeptForCourse.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        selectDeptForCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "none", "Computer Science and Engineering" }));
        selectDeptForCourse.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(25, 207, 38), 1, true));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("Semester");

        selectSemForCourse.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        selectSemForCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "none", "Spring", "Fall" }));
        selectSemForCourse.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(25, 207, 38), 1, true));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Select Deparment");

        AddCourseBtn.setBackground(new java.awt.Color(0, 204, 0));
        AddCourseBtn.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        AddCourseBtn.setForeground(new java.awt.Color(255, 255, 255));
        AddCourseBtn.setText("ADD");
        AddCourseBtn.setMargin(new java.awt.Insets(0, 0, 0, 0));
        AddCourseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCourseBtnActionPerformed(evt);
            }
        });

        selectYearForCourse.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        selectYearForCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "none", "2023", "2024", "2025", "2026", "2027" }));
        selectYearForCourse.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(25, 207, 38), 1, true));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Year");

        selectIntakeForCourse.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        selectIntakeForCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "none", "41", "42" }));
        selectIntakeForCourse.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(25, 207, 38), 1, true));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Intake");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectDeptForCourse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectSemForCourse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectYearForCourse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectIntakeForCourse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel3)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(deleteStudentText)
                        .addGap(91, 91, 91)))
                .addGap(123, 123, 123))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AddCourseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(281, 281, 281))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(deleteStudentText)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectDeptForCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectSemForCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectYearForCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectIntakeForCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                    .addComponent(AddCourseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(93, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnFromDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backBtnFromDeleteMouseClicked
        AdminOpearation adminOpearation = new AdminOpearation();
        if (!checkReadyForDatabese) {
            adminOpearation.setVisible(true);
            this.dispose();
        } else {
            try {
                // TODO add your handling code here:
                connection.close();
            } catch (SQLException ex) {
                Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
            }
            checkReadyForDatabese = false;
            adminOpearation.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_backBtnFromDeleteMouseClicked

    private void logOutBtn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logOutBtn1MouseClicked
        if (!checkReadyForDatabese) {
            mainPage.setVisible(true);
            this.dispose();
        } else {
            try {
                // TODO add your handling code here:
                connection.close();
            } catch (SQLException ex) {
                Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
            }
            checkReadyForDatabese = false;
            mainPage.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_logOutBtn1MouseClicked

    private void AddCourseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCourseBtnActionPerformed
        subjectAddChecker = false;
        String inputDept = (String) selectDeptForCourse.getSelectedItem();
        String inputSem = (String) selectSemForCourse.getSelectedItem();
        String inputYear = (String) selectYearForCourse.getSelectedItem();
        String inputIntake = (String) selectIntakeForCourse.getSelectedItem();

        if (inputDept.equals("none")) {
            JOptionPane.showMessageDialog(null, "Field Required", "Pelese Select Department", JOptionPane.INFORMATION_MESSAGE);
        } else if (inputSem.equals("none")) {
            JOptionPane.showMessageDialog(null, "Field Required", "Pelese Select Semester", JOptionPane.INFORMATION_MESSAGE);
        } else if (inputYear.equals("none")) {
            JOptionPane.showMessageDialog(null, "Field Required", "Pelese Select Year", JOptionPane.INFORMATION_MESSAGE);
        } else if (inputIntake.equals("none")) {
            JOptionPane.showMessageDialog(null, "Field Required", "Pelese Select Intake", JOptionPane.INFORMATION_MESSAGE);
        } else {

            try {
                String url = "jdbc:mysql://localhost:3306/studentmangementsystem"; // Replace localhost with your database host
                String user = "root"; // Replace with your database username
                String password = ""; // Replace with your database password

                Class.forName("com.mysql.cj.jdbc.Driver");
                connection = DriverManager.getConnection(url, user, password);
            } catch (SQLException | ClassNotFoundException e) {
                e.printStackTrace();
            }

            if (inputDept.equals("Computer Science and Engineering") && inputIntake.equals("41")) {
                if (inputSem.equals("Spring") && inputYear.equals("2023")) {
                    try {

                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '41' AND stdSemester = 'Spring' AND stdYear = '2023'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");

                            // Retrieve courses for 1st semester
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '1st'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);
                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?, ?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                       
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }

                } else if (inputSem.equals("Fall") && inputYear.equals("2023")) {
                    try {

                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '41' AND stdSemester = 'Fall' AND stdYear = '2023'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '2nd'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);
                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?,?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                        
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                } else if (inputSem.equals("Spring") && inputYear.equals("2024")) {
                    try {

                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '41' AND stdSemester = 'Spring' AND stdYear = '2024'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '3rd'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);
                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?,?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                    
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                } else if (inputSem.equals("Fall") && inputYear.equals("2024")) {
                    try {

                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '41' AND stdSemester = 'Fall' AND stdYear = '2024'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '4th'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);

                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?,?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                    
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                } else if (inputSem.equals("Spring") && inputYear.equals("2025")) {
                    try {

                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '41' AND stdSemester = 'Spring' AND stdYear = '2025'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '5th'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);

                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?,?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                     
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                } else if (inputSem.equals("Fall") && inputYear.equals("2025")) {
                    try {

                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '41' AND stdSemester = 'Fall' AND stdYear = '2025'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '6th'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);

                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?,?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                        
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    //6th sem
                } else if (inputSem.equals("Spring") && inputYear.equals("2026")) {
                    try {

                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '41' AND stdSemester = 'Spring' AND stdYear = '2026'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '7th'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);

                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?,?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                      
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    //7th sem
                } else if (inputSem.equals("Fall") && inputYear.equals("2026")) {
                    try {

                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '41' AND stdSemester = 'Fall' AND stdYear = '2026'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '8th'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);

                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?,?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                       
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            } else if (inputDept.equals("Computer Science and Engineering") && inputIntake.equals("42")) {
                if (inputSem.equals("Fall") && inputYear.equals("2023")) {
                    try {

                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '42' AND stdSemester = 'Fall' AND stdYear = '2023'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");

                            // Retrieve courses for 1st semester
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '1st'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);
                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?, ?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                      
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                } else if (inputSem.equals("Spring") && inputYear.equals("2024")) {
                    try {

                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '42' AND stdSemester = 'Spring' AND stdYear = '2024'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");

                            // Retrieve courses for 1st semester
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '2nd'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);
                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?, ?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                      

                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    //2nd sem
                } else if (inputSem.equals("Fall") && inputYear.equals("2024")) {
                    try {

                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '42' AND stdSemester = 'Fall' AND stdYear = '2024'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");

                            // Retrieve courses for 1st semester
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '3rd'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);
                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?, ?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                       

                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    //3rd sem
                } else if (inputSem.equals("Spring") && inputYear.equals("2025")) {
                    try {

                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '42' AND stdSemester = 'Spring' AND stdYear = '2025'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");

                            // Retrieve courses for 1st semester
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '4th'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);
                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?, ?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                       

                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    //4th sem
                } else if (inputSem.equals("Fall") && inputYear.equals("2025")) {
                    try {

                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '42' AND stdSemester = 'Fall' AND stdYear = '2025'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");

                            // Retrieve courses for 1st semester
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '5th'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);
                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?, ?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                        

                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    //5th sem
                } else if (inputSem.equals("Spring") && inputYear.equals("2026")) {
                    try {

                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '42' AND stdSemester = 'Spring' AND stdYear = '2026'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");

                            // Retrieve courses for 1st semester
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '6th'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);

                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?, ?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                       
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    //6th sem
                } else if (inputSem.equals("Fall") && inputYear.equals("2026")) {
                    try {
                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '42' AND stdSemester = 'Fall' AND stdYear = '2026'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");

                            // Retrieve courses for 1st semester
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '7th'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);

                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?, ?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                       

                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    //7th sem
                } else if (inputSem.equals("Spring") && inputYear.equals("2027")) {
                    try {
                        String queryForSelectStudent = "SELECT stdId FROM stdinfo WHERE stdIntake = '42' AND stdSemester = 'Spring' AND stdYear = '2027'";
                        PreparedStatement selectStudents = connection.prepareStatement(queryForSelectStudent);

                        ResultSet resultSet = selectStudents.executeQuery();

                        while (resultSet.next()) {
                            String stdId = resultSet.getString("stdId");

                            // Retrieve courses for 1st semester
                            String selectForSemCourse = "SELECT courseCode, courseTitle FROM courses WHERE semester = '8th'";
                            PreparedStatement selectCourses = connection.prepareStatement(selectForSemCourse);

                            ResultSet courseResultSet = selectCourses.executeQuery();

                            while (courseResultSet.next()) {
                                String courseCode = courseResultSet.getString("courseCode");
                                String courseTitle = courseResultSet.getString("courseTitle");

                                String checkDuplicateQuery = "SELECT COUNT(*) FROM intake WHERE stdId = ? AND courseCode = ?";
                                PreparedStatement checkDuplicate = connection.prepareStatement(checkDuplicateQuery);

                                checkDuplicate.setString(1, stdId);
                                checkDuplicate.setString(2, courseCode);

                                ResultSet duplicateCheckResultSet = checkDuplicate.executeQuery();
                                duplicateCheckResultSet.next();
                                int count = duplicateCheckResultSet.getInt(1);

                                if (count == 0) {
                                    String insertQuery = "INSERT INTO intake (stdId, semester,  intake, year, courseCode, courseTitle) VALUES (?, ?, ?, ?, ?, ?)";
                                    PreparedStatement insertCourse = connection.prepareStatement(insertQuery);

                                    insertCourse.setString(1, stdId);
                                    insertCourse.setString(2, inputSem);
                                    insertCourse.setString(3, inputIntake);
                                    insertCourse.setString(4, inputYear);
                                    insertCourse.setString(5, courseCode);
                                    insertCourse.setString(6, courseTitle);

                                    int affectedRows = insertCourse.executeUpdate();
                                    if (affectedRows > 0) {
                                        subjectAddChecker = true;
                                    }
                                }
                            }
                        }
                        
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }

                }
            }

            if (subjectAddChecker) {
                JOptionPane.showMessageDialog(null, "All Courses successfully Inserted.", "Sucessfull", JOptionPane.INFORMATION_MESSAGE);
                try {
                    String selectRegStd = "SELECT stdId, SUM(courses.credit) AS total_credits "
                            + "FROM intake "
                            + "JOIN courses ON intake.courseCode = courses.courseCode "
                            + "GROUP BY stdId";

                    PreparedStatement statementRegStd = connection.prepareStatement(selectRegStd);
                    ResultSet sestRegstd = statementRegStd.executeQuery();

                    float perCredit = 1300;
                    float librayFee = 1500;
                    float labFee = 2000;
                    float otherFee = 3000;
                    float medicalFee = 1000;
                    float tutuionFee = 0;
                    PreparedStatement checkIfExistsStatement;
                    ResultSet resultSetIsExit;
                    String stdId;
                    float totalCredits = 0;
                    float totalCost = 0;
                    int rowCount;

                    while (sestRegstd.next()) {
                        stdId = sestRegstd.getString("stdId");
                        totalCredits = sestRegstd.getInt("total_credits");
                        String checkIfExistsQuery = "SELECT COUNT(*) FROM demand WHERE stdId = ?";
                        checkIfExistsStatement = connection.prepareStatement(checkIfExistsQuery);
                        checkIfExistsStatement.setString(1, stdId);
                        resultSetIsExit = checkIfExistsStatement.executeQuery();
                        resultSetIsExit.next();
                        rowCount = resultSetIsExit.getInt(1);

                        checkIfExistsStatement.close();
                        resultSetIsExit.close();

                        if (rowCount == 0) {
                            tutuionFee = perCredit * totalCredits;
                            totalCost = tutuionFee + librayFee + labFee + otherFee + medicalFee;
                            String insertQuery = "INSERT INTO demand (stdId, tutionFee, librayFee, medicalFee, labFee, otherFee, toatalFee) VALUES (?, ?, ?, ?, ?, ?, ?)";
                            checkIfExistsStatement = connection.prepareStatement(insertQuery);
                            checkIfExistsStatement.setString(1, stdId);
                            checkIfExistsStatement.setDouble(2, tutuionFee);
                            checkIfExistsStatement.setDouble(3, librayFee);
                            checkIfExistsStatement.setDouble(4, medicalFee);
                            checkIfExistsStatement.setDouble(5, labFee);
                            checkIfExistsStatement.setDouble(6, otherFee);
                            checkIfExistsStatement.setDouble(7, totalCost);
                            checkIfExistsStatement.executeUpdate();
                            checkIfExistsStatement.close();
                        }
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } else {

                JOptionPane.showMessageDialog(null, "All participants have been inseted previously or Not any subject for this semester", "New Inserted Not Allowed", JOptionPane.ERROR_MESSAGE);
            }

        }
     
        selectDeptForCourse.setSelectedItem("none");
        selectSemForCourse.setSelectedItem("none");
        selectYearForCourse.setSelectedItem("none");
        selectIntakeForCourse.setSelectedItem("none");
    }//GEN-LAST:event_AddCourseBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddCourse().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddCourseBtn;
    private javax.swing.JLabel backBtnFromDelete;
    private javax.swing.JLabel deleteStudentText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel logOutBtn1;
    private javax.swing.JComboBox<String> selectDeptForCourse;
    private javax.swing.JComboBox<String> selectIntakeForCourse;
    private javax.swing.JComboBox<String> selectSemForCourse;
    private javax.swing.JComboBox<String> selectYearForCourse;
    // End of variables declaration//GEN-END:variables
}

/*

 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license

 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template

 */
package StudentManagement;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 *
 *
 * @author Aktaruzzaman
 *
 */
public class AddResult extends javax.swing.JFrame {

    MainPage mainPage;
    private static Connection connection;
    boolean checkReadyForDatabese = false;

    /**
     *
     * Creates new form AddResult
     *
     */
    public AddResult() {
        initComponents();
        mainPage = new MainPage();
        setResizable(false);
        this.setSize(1200, 700);
        subjectOne.setEditable(false);
        subjectTwo.setEditable(false);
        subjectThree.setEditable(false);
        subjectFour.setEditable(false);
        subjectFive.setEditable(false);
        subjectSix.setEditable(false);
        subjectSeven.setEditable(false);
        
        subjectOneCredit.setEditable(false);
        subjectTwoCredit.setEditable(false);
        subjectThreeCredit.setEditable(false);
        subjectFourCredit.setEditable(false);
        subjectFiveCredit.setEditable(false);
        subjectSixCredit.setEditable(false);
        subjectSevenCredit.setEditable(false);

    }

    /**
     *
     * This method is called from within the constructor to initialize the form.
     *
     * WARNING: Do NOT modify this code. The content of this method is always
     *
     * regenerated by the Form Editor.
     *
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        logOutBtn1 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        backBtn = new javax.swing.JLabel();
        subjectOne = new javax.swing.JTextField();
        subjectTwo = new javax.swing.JTextField();
        subjectThree = new javax.swing.JTextField();
        subjectFour = new javax.swing.JTextField();
        subjectFive = new javax.swing.JTextField();
        subjectSix = new javax.swing.JTextField();
        subjectSeven = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        subjectThreeCredit = new javax.swing.JTextField();
        subjectFourCredit = new javax.swing.JTextField();
        subjectFiveCredit = new javax.swing.JTextField();
        subjectSixCredit = new javax.swing.JTextField();
        subjectSevenCredit = new javax.swing.JTextField();
        subjectOneCredit = new javax.swing.JTextField();
        subjectTwoCredit = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        subjectThreeMark = new javax.swing.JTextField();
        subjectFourMark = new javax.swing.JTextField();
        subjectFiveMark = new javax.swing.JTextField();
        subjectSixMark = new javax.swing.JTextField();
        subjectSevenMark = new javax.swing.JTextField();
        subjectOneMark = new javax.swing.JTextField();
        subjectTwoMark = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        deleteStudentText = new javax.swing.JLabel();
        addResultBtn = new javax.swing.JButton();
        searchStdId = new javax.swing.JTextField();
        searchStudentBtn = new javax.swing.JPanel();
        searchBtn = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Result");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1200, 700));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(255, 79, 90));
        jPanel5.setPreferredSize(new java.awt.Dimension(115, 45));

        logOutBtn1.setBackground(new java.awt.Color(0, 153, 204));
        logOutBtn1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logOutBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logout.png"))); // NOI18N
        logOutBtn1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logOutBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logOutBtn1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(logOutBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logOutBtn1)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 560, 120, 60));

        jPanel6.setBackground(new java.awt.Color(255, 79, 90));
        jPanel6.setFocusCycleRoot(true);
        jPanel6.setPreferredSize(new java.awt.Dimension(115, 40));

        backBtn.setBackground(new java.awt.Color(0, 153, 204));
        backBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back.png"))); // NOI18N
        backBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 560, 110, 60));

        subjectOne.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectOne, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 180, 340, 40));

        subjectTwo.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectTwo, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 230, 340, 40));

        subjectThree.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectThree, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 290, 340, 40));

        subjectFour.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectFour, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 340, 340, 40));

        subjectFive.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectFive, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 390, 340, 40));

        subjectSix.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectSix, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 440, 340, 40));

        subjectSeven.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectSeven, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 490, 340, 40));

        jLabel1.setBackground(new java.awt.Color(255, 79, 90));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 51));
        jLabel1.setText("Courses");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 140, -1, -1));

        subjectThreeCredit.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectThreeCredit, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 290, 114, 40));

        subjectFourCredit.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectFourCredit, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 340, 114, 40));

        subjectFiveCredit.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectFiveCredit, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 390, 114, 40));

        subjectSixCredit.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectSixCredit, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 440, 114, 40));

        subjectSevenCredit.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectSevenCredit, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 490, 114, 40));

        subjectOneCredit.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectOneCredit, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 180, 114, 40));

        subjectTwoCredit.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectTwoCredit, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 230, 114, 40));

        jLabel2.setBackground(new java.awt.Color(255, 79, 90));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 0, 51));
        jLabel2.setText("Credit");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 140, -1, -1));

        subjectThreeMark.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectThreeMark, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 290, 114, 40));

        subjectFourMark.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectFourMark, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 340, 114, 40));

        subjectFiveMark.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectFiveMark, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 390, 114, 40));

        subjectSixMark.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectSixMark, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 440, 114, 40));

        subjectSevenMark.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectSevenMark, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 490, 114, 40));

        subjectOneMark.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectOneMark, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 180, 114, 40));

        subjectTwoMark.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jPanel1.add(subjectTwoMark, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 230, 114, 40));

        jLabel3.setBackground(new java.awt.Color(255, 79, 90));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 0, 51));
        jLabel3.setText("Total Mark");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 140, -1, -1));

        deleteStudentText.setBackground(new java.awt.Color(0, 204, 255));
        deleteStudentText.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 48)); // NOI18N
        deleteStudentText.setForeground(new java.awt.Color(255, 79, 90));
        deleteStudentText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteStudentText.setText("ADD RESULT");
        jPanel1.add(deleteStudentText, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 40, 398, 95));

        addResultBtn.setBackground(new java.awt.Color(255, 79, 90));
        addResultBtn.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        addResultBtn.setForeground(new java.awt.Color(255, 255, 255));
        addResultBtn.setText("ADD RESULT");
        addResultBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addResultBtnActionPerformed(evt);
            }
        });
        jPanel1.add(addResultBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 560, 230, 60));

        searchStdId.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        searchStdId.setForeground(new java.awt.Color(153, 153, 153));
        searchStdId.setText("  Enter Student Id");
        searchStdId.setBackground(new java.awt.Color(236,236, 236, 200));
        searchStdId.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 51), 1, true));
        searchStdId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchStdIdFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchStdIdFocusLost(evt);
            }
        });
        searchStdId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchStdIdActionPerformed(evt);
            }
        });
        jPanel1.add(searchStdId, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 210, 310, 50));

        searchStudentBtn.setBackground(new java.awt.Color(236,236, 236, 200));
        searchStudentBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 51), 1, true));
        searchStudentBtn.setPreferredSize(new java.awt.Dimension(115, 45));
        searchStudentBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchStudentBtnMouseClicked(evt);
            }
        });

        searchBtn.setBackground(new java.awt.Color(0, 153, 204));
        searchBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        searchBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search_icon_black.png"))); // NOI18N
        searchBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout searchStudentBtnLayout = new javax.swing.GroupLayout(searchStudentBtn);
        searchStudentBtn.setLayout(searchStudentBtnLayout);
        searchStudentBtnLayout.setHorizontalGroup(
            searchStudentBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
        );
        searchStudentBtnLayout.setVerticalGroup(
            searchStudentBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
        );

        jPanel1.add(searchStudentBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 280, -1, 60));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addResultPage.png"))); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 550));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void searchStdIdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchStdIdFocusGained
        if (searchStdId.getText().equals("  Enter Student Id")) {
            searchStdId.setText(null);
            searchStdId.requestFocus();
            mainPage.removePlaaceholderStytle(searchStdId);
        }
    }//GEN-LAST:event_searchStdIdFocusGained


    private void searchStdIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchStdIdFocusLost
        // TODO add your handling code here:
        if (searchStdId.getText().length() == 0) {
            MainPage.addPlaaceholderStytle(searchStdId);
            searchStdId.setText("  Enter Student Id");
        }

    }//GEN-LAST:event_searchStdIdFocusLost

    private void searchStdIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchStdIdActionPerformed


    }//GEN-LAST:event_searchStdIdActionPerformed

    private void searchBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBtnMouseClicked
        try {
            // Connect to the database
            String user = "root";
            String password = "";
            String url = "jdbc:mysql://localhost:3306/studentmangementsystem?serverTimezone=UTC";
            connection = DriverManager.getConnection(url, user, password);
            // Retrieve the ID from the text field
            String studentId = searchStdId.getText();

            // Prepare a SELECT statement to check if the ID exists
            String checkIdQuery = "SELECT intake.courseTitle, courses.credit "
                    + "FROM intake "
                    + "INNER JOIN courses "
                    + "ON intake.courseTitle = courses.courseTitle "
                    + "WHERE intake.stdId = ?";

            PreparedStatement checkIdStatement = connection.prepareStatement(checkIdQuery);
            checkIdStatement.setString(1, studentId);

            // Execute the SELECT statement
            ResultSet checkIdResultSet = checkIdStatement.executeQuery();
            int index = 1;
            boolean hasSubjects = false;

               
            while (checkIdResultSet.next()) {
                    hasSubjects = true;
                    
                     String courseTitle = checkIdResultSet.getString("courseTitle");
                     String courseCrdit = checkIdResultSet.getString("credit");
                    
                    if (index == 1) {
                        if (!(courseTitle.equals(""))) {
                            subjectOne.setText(courseTitle);
                            subjectOneCredit.setText(courseCrdit);
                        }

                    } else if (index == 2) {
                        subjectTwo.setEditable(false);
                        if (!(courseTitle.equals(""))) {
                            subjectTwo.setText(courseTitle);
                            subjectTwoCredit.setText(courseCrdit);
                        }


                    } else if (index == 3 && !(courseTitle.equals(""))) {
                        if (!(courseTitle.equals(""))) {
                            subjectThree.setText(courseTitle);
                            subjectThreeCredit.setText(courseCrdit);
                        }

                    } else if (index == 4) {
                        if (!(courseTitle.equals(""))) {
                            subjectFour.setText(courseTitle);
                            subjectFourCredit.setText(courseCrdit);
                        }


                    } else if (index == 5) {
                        if (!(courseTitle.equals(""))) {
                            subjectFive.setText(courseTitle);
                            subjectFiveCredit.setText(courseCrdit);
                        }
                    } else if (index == 6) {
                        if (!(courseTitle.equals(""))) {
                            subjectSix.setText(courseTitle);
                            subjectSixCredit.setText(courseCrdit);
                        }

                    } else if (index == 7) {
                        if (!(courseTitle.equals(""))) {
                            subjectSeven.setText(courseTitle);
                            subjectSevenCredit.setText(courseCrdit);
                        }
                    }
                    index++;
            }
                
                
            if(!hasSubjects){
                JOptionPane.showMessageDialog(rootPane, "Not any register subject for Id: " + studentId, "Not Found", JOptionPane.ERROR_MESSAGE);
                subjectOne.setText("");
                subjectTwo.setText("");
                subjectThree.setText("");
                subjectFour.setText("");
                subjectFive.setText("");
                subjectSix.setText("");
                subjectSeven.setText("");
                subjectOneCredit.setText("");
                subjectTwoCredit.setText("");
                subjectThreeCredit.setText("");
                subjectFourCredit.setText("");
                subjectFiveCredit.setText("");
                subjectSixCredit.setText("");
                subjectSevenCredit.setText("");
                subjectOneMark.setText("");
                subjectTwoMark.setText("");
                subjectThreeMark.setText("");
                subjectFourMark.setText("");
                subjectFiveMark.setText("");
                subjectSixMark.setText("");
                subjectSevenMark.setText("");
            }

            // Close the connection
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_searchBtnMouseClicked


    private void searchStudentBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchStudentBtnMouseClicked

        // TODO add your handling code here:

    }//GEN-LAST:event_searchStudentBtnMouseClicked


    private void logOutBtn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logOutBtn1MouseClicked

        if (!checkReadyForDatabese) {
            mainPage.setVisible(true);
            this.dispose();

        } else {
            try {
                // TODO add your handling code here:
                connection.close();
            } catch (SQLException ex) {
                Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
            }

            checkReadyForDatabese = false;
            mainPage.setVisible(true);
            this.dispose();
        }

    }//GEN-LAST:event_logOutBtn1MouseClicked


    private void backBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backBtnMouseClicked

        AdminMain adminMain = new AdminMain();
        if (!checkReadyForDatabese) {
            adminMain.setVisible(true);
            this.dispose();

        } else {
            try {
                // TODO add your handling code here:
                connection.close();
            } catch (SQLException ex) {
                Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
            }

            checkReadyForDatabese = false;
            adminMain.setVisible(true);
            this.dispose();
        }

    }//GEN-LAST:event_backBtnMouseClicked


    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        requestFocusInWindow(true);
    }//GEN-LAST:event_formWindowGainedFocus


    private void addResultBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addResultBtnActionPerformed
        try {
            boolean checkSubResultInsert = false;
            // Connect to the database
            String user = "root";
            String password = "";
            String url = "jdbc:mysql://localhost:3306/studentmangementsystem?serverTimezone=UTC";
            connection = DriverManager.getConnection(url, user, password);

            // Retrieve the ID from the text field
            String studentId = searchStdId.getText();
            String inputSubOne = subjectOne.getText();
            String inputSubTwo = subjectTwo.getText();
            String inputSubThree = subjectThree.getText();
            String inputSubFour = subjectFour.getText();
            String inputSubFive = subjectFive.getText();
            String inputSubSix = subjectSix.getText();
            String inputSubSeven = subjectSeven.getText();

            String inputSubOneCredit = subjectOneCredit.getText();
            String inputSubTwoCredit = subjectTwoCredit.getText();
            String inputSubThreeCredit = subjectThreeCredit.getText();
            String inputSubFourCredit = subjectFourCredit.getText();
            String inputSubFiveCredit = subjectFiveCredit.getText();
            String inputSubSixCredit = subjectSixCredit.getText();
            String inputSubSevenCredit = subjectSevenCredit.getText();

            String inputSubOneScore = subjectOneMark.getText();
            String inputSubTwoScore = subjectTwoMark.getText();
            String inputSubThreeScore = subjectThreeMark.getText();
            String inputSubFourScore = subjectFourMark.getText();
            String inputSubFiveScore = subjectFiveMark.getText();
            String inputSubSixScore = subjectSixMark.getText();
            String inputSubSevenScore = subjectSevenMark.getText();

            if (!(inputSubOne.equals("")) && !(inputSubOneCredit.equals("")) && (inputSubOneScore.equals(""))) {
                JOptionPane.showMessageDialog(null, inputSubOne + " Mark is Required", "Field Required", JOptionPane.INFORMATION_MESSAGE);
            } else if (!(inputSubTwo.equals("")) && !(inputSubTwoCredit.equals("")) && (inputSubTwoScore.equals(""))) {
                JOptionPane.showMessageDialog(null, inputSubTwo + " Mark is Required", "Field Required", JOptionPane.INFORMATION_MESSAGE);
            } else if (!(inputSubThree.equals("")) && !(inputSubThreeCredit.equals("")) && (inputSubThreeScore.equals(""))) {
                JOptionPane.showMessageDialog(null, inputSubThree + " Mark is Required", "Field Required", JOptionPane.INFORMATION_MESSAGE);
            } else if (!(inputSubFour.equals("")) && !(inputSubFourCredit.equals("")) && (inputSubFourScore.equals(""))) {
                JOptionPane.showMessageDialog(null, inputSubFour + " Mark is Required", "Field Required", JOptionPane.INFORMATION_MESSAGE);
            } else if (!(inputSubFive.equals("")) && !(inputSubFiveCredit.equals("")) && (inputSubFiveScore.equals(""))) {
                JOptionPane.showMessageDialog(null, inputSubFive + " Mark is Required", "Field Required", JOptionPane.INFORMATION_MESSAGE);
            } else if (!(inputSubSix.equals("")) && !(inputSubSixCredit.equals("")) && (inputSubSixScore.equals(""))) {
                JOptionPane.showMessageDialog(null, inputSubSix + " Mark is Required", "Field Required", JOptionPane.INFORMATION_MESSAGE);
            } else if (!(inputSubSeven.equals("")) && !(inputSubSevenCredit.equals("")) && (inputSubSevenScore.equals(""))) {
                JOptionPane.showMessageDialog(null, inputSubSeven + " Mark is Required", "Field Required", JOptionPane.INFORMATION_MESSAGE);
            } else {
                String semester;
                String year;
               
                if (!(inputSubOne.equals("")) && !(inputSubOneCredit.equals("")) && !(inputSubOneScore.equals(""))) {
                    String selectQuery = "SELECT semester, year FROM intake WHERE courseTitle = ?";
                    PreparedStatement selectStatement = connection.prepareStatement(selectQuery);
                    selectStatement.setString(1, inputSubOne);
                    ResultSet resultSet = selectStatement.executeQuery();

                    if (resultSet.next()) {
                        semester = resultSet.getString("semester");
                        year = resultSet.getString("year");
                        String insertQuery = "INSERT INTO result(stdId, semester, year, courseTitle, courseCredit, score) VALUES (?, ?, ?, ?, ?, ?)";
                        try (PreparedStatement insertStatement = connection.prepareStatement(insertQuery)) {
                            insertStatement.setString(1, studentId);
                            insertStatement.setString(2, semester);
                            insertStatement.setString(3, year);
                            insertStatement.setString(4, inputSubOne);
                            insertStatement.setString(5, inputSubOneCredit);
                            insertStatement.setInt(6, Integer.parseInt(inputSubOneScore));

                            // Execute the insert query
                            int rowsAffected = insertStatement.executeUpdate();
                            if (rowsAffected > 0) {
                                checkSubResultInsert = true;
                            } else {
                                checkSubResultInsert = true;
                            }
                            insertStatement.close();
                        }
                    }
                    selectStatement.close();
                    resultSet.close();
                }

                if (!(inputSubTwo.equals("")) && !(inputSubTwoCredit.equals("")) && !(inputSubTwoScore.equals(""))) {
                    String selectQuery = "SELECT semester, year FROM intake WHERE courseTitle = ?";
                    PreparedStatement selectStatement = connection.prepareStatement(selectQuery);
                    selectStatement.setString(1, inputSubTwo);
                    ResultSet resultSet = selectStatement.executeQuery();

                    if (resultSet.next()) {
                        semester = resultSet.getString("semester");
                        year = resultSet.getString("year");

                        String insertQuery = "INSERT INTO result(stdId, semester, year, courseTitle, courseCredit, score) VALUES (?, ?, ?, ?, ?, ?)";
                        try (PreparedStatement insertStatement = connection.prepareStatement(insertQuery)) {
                            insertStatement.setString(1, studentId);
                            insertStatement.setString(2, semester);
                            insertStatement.setString(3, year);
                            insertStatement.setString(4, inputSubTwo);
                            insertStatement.setString(5, inputSubTwoCredit);
                            insertStatement.setInt(6, Integer.parseInt(inputSubTwoScore));

                            // Execute the insert query
                            int rowsAffected = insertStatement.executeUpdate();
                            if (rowsAffected > 0) {
                                checkSubResultInsert = true;
                            } else {
                                checkSubResultInsert = false;
                            }
                            insertStatement.close();
                        }
                    }

                    // Close the select statement and result set
                    selectStatement.close();
                    resultSet.close();

                }

                if (!(inputSubThree.equals("")) && !(inputSubThreeCredit.equals("")) && !(inputSubThreeScore.equals(""))) {
                    String selectQuery = "SELECT semester, year FROM intake WHERE courseTitle = ?";
                    PreparedStatement selectStatement = connection.prepareStatement(selectQuery);
                    selectStatement.setString(1, inputSubThree);
                    ResultSet resultSet = selectStatement.executeQuery();

                    if (resultSet.next()) {
                        semester = resultSet.getString("semester");
                        year = resultSet.getString("year");

                        String insertQuery = "INSERT INTO result(stdId, semester, year, courseTitle, courseCredit, score) VALUES (?, ?, ?, ?, ?, ?)";
                        try (PreparedStatement insertStatement = connection.prepareStatement(insertQuery)) {
                            insertStatement.setString(1, studentId);
                            insertStatement.setString(2, semester);
                            insertStatement.setString(3, year);
                            insertStatement.setString(4, inputSubThree);
                            insertStatement.setString(5, inputSubThreeCredit);
                            insertStatement.setInt(6, Integer.parseInt(inputSubThreeScore));

                            // Execute the insert query
                            int rowsAffected = insertStatement.executeUpdate();
                            if (rowsAffected > 0) {
                                checkSubResultInsert = true;
                            } else {
                                checkSubResultInsert = false;
                            }
                            insertStatement.close();
                        }
                    }
                    selectStatement.close();
                    resultSet.close();
                }

                if (!(inputSubFour.equals("")) && !(inputSubFourCredit.equals("")) && !(inputSubFourScore.equals(""))) {
                    String selectQuery = "SELECT semester, year FROM intake WHERE courseTitle = ?";
                    PreparedStatement selectStatement = connection.prepareStatement(selectQuery);
                    selectStatement.setString(1, inputSubFour);
                    ResultSet resultSet = selectStatement.executeQuery();

                    if (resultSet.next()) {
                        semester = resultSet.getString("semester");
                        year = resultSet.getString("year");
                        String insertQuery = "INSERT INTO result(stdId, semester, year, courseTitle, courseCredit, score) VALUES (?, ?, ?, ?, ?, ?)";
                        try (PreparedStatement insertStatement = connection.prepareStatement(insertQuery)) {
                            insertStatement.setString(1, studentId);
                            insertStatement.setString(2, semester);
                            insertStatement.setString(3, year);
                            insertStatement.setString(4, inputSubFour);
                            insertStatement.setString(5, inputSubFourCredit);
                            insertStatement.setInt(6, Integer.parseInt(inputSubFourScore));

                            int rowsAffected = insertStatement.executeUpdate();
                            if (rowsAffected > 0) {
                                checkSubResultInsert = true;
                            } else {
                                checkSubResultInsert = false;
                            }
                            insertStatement.close();
                        }
                    }
                    selectStatement.close();
                    resultSet.close();
                }

                if (!(inputSubFive.equals("")) && !(inputSubFiveCredit.equals("")) && !(inputSubFiveScore.equals(""))) {
                    String selectQuery = "SELECT semester, year FROM intake WHERE courseTitle = ?";
                    PreparedStatement selectStatement = connection.prepareStatement(selectQuery);
                    selectStatement.setString(1, inputSubFive);
                    ResultSet resultSet = selectStatement.executeQuery();
                    if (resultSet.next()) {
                        semester = resultSet.getString("semester");
                        year = resultSet.getString("year");

                        String insertQuery = "INSERT INTO result(stdId, semester, year, courseTitle, courseCredit, score) VALUES (?, ?, ?, ?, ?, ?)";
                        try (PreparedStatement insertStatement = connection.prepareStatement(insertQuery)) {
                            insertStatement.setString(1, studentId);
                            insertStatement.setString(2, semester);
                            insertStatement.setString(3, year);
                            insertStatement.setString(4, inputSubFive);
                            insertStatement.setString(5, inputSubFiveCredit);
                            insertStatement.setInt(6, Integer.parseInt(inputSubFiveScore));

                            int rowsAffected = insertStatement.executeUpdate();
                            if (rowsAffected > 0) {
                                checkSubResultInsert = true;
                            } else {
                                checkSubResultInsert = false;
                            }
                            insertStatement.close();
                        }

                    }
                    selectStatement.close();
                    resultSet.close();

                }

                if (!(inputSubSix.equals("")) && !(inputSubSixCredit.equals("")) && !(inputSubSixScore.equals(""))) {
                    String selectQuery = "SELECT semester, year FROM intake WHERE courseTitle = ?";
                    PreparedStatement selectStatement = connection.prepareStatement(selectQuery);
                    selectStatement.setString(1, inputSubSix);
                    ResultSet resultSet = selectStatement.executeQuery();

                    if (resultSet.next()) {
                        semester = resultSet.getString("semester");
                        year = resultSet.getString("year");

                        String insertQuery = "INSERT INTO result(stdId, semester, year, courseTitle, courseCredit, score) VALUES (?, ?, ?, ?, ?, ?)";
                        try (PreparedStatement insertStatement = connection.prepareStatement(insertQuery)) {
                            insertStatement.setString(1, studentId);
                            insertStatement.setString(2, semester);
                            insertStatement.setString(3, year);
                            insertStatement.setString(4, inputSubSix);
                            insertStatement.setString(5, inputSubSixCredit);
                            insertStatement.setInt(6, Integer.parseInt(inputSubSixScore));

                            int rowsAffected = insertStatement.executeUpdate();
                            if (rowsAffected > 0) {
                                checkSubResultInsert = true;
                            } else {
                                checkSubResultInsert = false;
                            }
                            insertStatement.close();
                        }

                    }

                    selectStatement.close();
                    resultSet.close();
                }

                if (!(inputSubSeven.equals("")) && !(inputSubSevenCredit.equals("")) && !(inputSubSevenScore.equals(""))) {
                    String selectQuery = "SELECT semester, year FROM intake WHERE courseTitle = ?";
                    PreparedStatement selectStatement = connection.prepareStatement(selectQuery);
                    selectStatement.setString(1, inputSubSeven);
                    ResultSet resultSet = selectStatement.executeQuery();

                    if (resultSet.next()) {
                        semester = resultSet.getString("semester");
                        year = resultSet.getString("year");

                        String insertQuery = "INSERT INTO result(stdId, semester, year, courseTitle, courseCredit, score) VALUES (?, ?, ?, ?, ?, ?)";
                        try (PreparedStatement insertStatement = connection.prepareStatement(insertQuery)) {
                            insertStatement.setString(1, studentId);
                            insertStatement.setString(2, semester);
                            insertStatement.setString(3, year);
                            insertStatement.setString(4, inputSubSeven);
                            insertStatement.setString(5, inputSubSevenCredit);
                            insertStatement.setInt(6, Integer.parseInt(inputSubSevenScore));

                            int rowsAffected = insertStatement.executeUpdate();
                            if (rowsAffected > 0) {
                                checkSubResultInsert = true;
                            } else {
                                checkSubResultInsert = false;
                            }
                            insertStatement.close();
                        }
                    }
                    selectStatement.close();
                    resultSet.close();

                }
            }

            if (checkSubResultInsert) {
                subjectOne.setText("");
                subjectTwo.setText("");
                subjectThree.setText("");
                subjectFour.setText("");
                subjectFive.setText("");
                subjectSix.setText("");
                subjectSeven.setText("");
                subjectOneCredit.setText("");
                subjectTwoCredit.setText("");
                subjectThreeCredit.setText("");
                subjectFourCredit.setText("");
                subjectFiveCredit.setText("");
                subjectSixCredit.setText("");
                subjectSevenCredit.setText("");
                subjectOneMark.setText("");
                subjectTwoMark.setText("");
                subjectThreeMark.setText("");
                subjectFourMark.setText("");
                subjectFiveMark.setText("");
                subjectSixMark.setText("");
                subjectSevenMark.setText("");
                
                
                JOptionPane.showMessageDialog(null, "Sucessfully Update Result", "Update Result", JOptionPane.INFORMATION_MESSAGE);
                String preivousYear;
                String stdIntake;
                String previousSemester;
                String studentIdRes;
                String stdDept;

                String selectQuery = "SELECT result.stdId, stdSemester, stdYear, stdIntake, stdDept " +
                "FROM result " +
                "JOIN stdinfo ON result.stdId = stdinfo.stdId";
                
                PreparedStatement statementForUpdateSemester = connection.prepareStatement(selectQuery);
                ResultSet resultSetForUpdateIntake = statementForUpdateSemester.executeQuery();

                if (resultSetForUpdateIntake.next()) {
                    studentIdRes = resultSetForUpdateIntake.getString(1);
                    previousSemester = resultSetForUpdateIntake.getString("stdSemester");
                    preivousYear = resultSetForUpdateIntake.getString("stdYear");
                    stdIntake = resultSetForUpdateIntake.getString("stdIntake");
                    stdDept = resultSetForUpdateIntake.getString("stdDept");

               
                    if (stdDept.equals("Computer Science and Engineering") && stdIntake.equals("41")) {
                        if (preivousYear.equals("2023") && previousSemester.equals("Spring")) {
                            String updateQuery = "UPDATE stdinfo SET stdSemester = ?, stdYear = ? WHERE stdId = ?";
                            PreparedStatement statementForUpdate = connection.prepareStatement(updateQuery);
                            statementForUpdate.setString(1, "Fall");
                            statementForUpdate.setString(2, "2023");
                            statementForUpdate.setString(3, studentIdRes);
                            statementForUpdate.executeUpdate();
                        } else if (preivousYear.equals("2023") && previousSemester.equals("Fall")) {
                           String updateQuery = "UPDATE stdinfo SET stdSemester = ?, stdYear = ? WHERE stdId = ?";
                            PreparedStatement statementForUpdate = connection.prepareStatement(updateQuery);
                            statementForUpdate.setString(1, "Spring");
                            statementForUpdate.setString(2, "2024");
                            statementForUpdate.setString(3, studentIdRes);
                            statementForUpdate.executeUpdate();
                        } else if (preivousYear.equals("2024") && previousSemester.equals("Spring")) {
                            String updateQuery = "UPDATE stdinfo SET stdSemester = ?, stdYear = ? WHERE stdId = ?";
                            PreparedStatement statementForUpdate = connection.prepareStatement(updateQuery);
                            statementForUpdate.setString(1, "Fall");
                            statementForUpdate.setString(2, "2024");
                           statementForUpdate.setString(3, studentIdRes);
                            statementForUpdate.executeUpdate();

                        } else if (preivousYear.equals("2024") && previousSemester.equals("Fall")) {
                            String updateQuery = "UPDATE stdinfo SET stdSemester = ?, stdYear = ? WHERE stdId = ?";
                            PreparedStatement statementForUpdate = connection.prepareStatement(updateQuery);
                            statementForUpdate.setString(1, "Spring");
                            statementForUpdate.setString(2, "2025");
                            statementForUpdate.setString(3, studentIdRes);
                            statementForUpdate.executeUpdate();

                        } else if (preivousYear.equals("2025") && previousSemester.equals("Spring")) {
                           String updateQuery = "UPDATE stdinfo SET stdSemester = ?, stdYear = ? WHERE stdId = ?";
                            PreparedStatement statementForUpdate = connection.prepareStatement(updateQuery);
                            statementForUpdate.setString(1, "Fall");
                            statementForUpdate.setString(2, "2025");
                            statementForUpdate.setString(3, studentIdRes);
                            statementForUpdate.executeUpdate();

                        } else if (preivousYear.equals("2025") && previousSemester.equals("Fall")) {
                            String updateQuery = "UPDATE stdinfo SET stdSemester = ?, stdYear = ? WHERE stdId = ?";
                            PreparedStatement statementForUpdate = connection.prepareStatement(updateQuery);
                            statementForUpdate.setString(1, "Spring");
                            statementForUpdate.setString(2, "2026");
                           statementForUpdate.setString(3, studentIdRes);
                            statementForUpdate.executeUpdate();

                        } else if (preivousYear.equals("2026") && previousSemester.equals("Spring")) {
                            String updateQuery = "UPDATE stdinfo SET stdSemester = ?, stdYear = ? WHERE stdId = ?";
                            PreparedStatement statementForUpdate = connection.prepareStatement(updateQuery);
                            statementForUpdate.setString(1, "Fall");
                            statementForUpdate.setString(2, "2026");
                            statementForUpdate.setString(3, studentIdRes);
                            statementForUpdate.executeUpdate();
                        }
                    } else if (stdDept.equals("Computer Science and Engineering") && stdIntake.equals("42")) {
                        if (preivousYear.equals("2023") && previousSemester.equals("Fall")) {
                            String updateQuery = "UPDATE stdinfo SET stdSemester = ?, stdYear = ? WHERE stdId = ?";
                            PreparedStatement statementForUpdate = connection.prepareStatement(updateQuery);
                            statementForUpdate.setString(1, "Spring");
                            statementForUpdate.setString(2, "2024");
                            statementForUpdate.setString(3, studentIdRes);
                            statementForUpdate.executeUpdate();

                        } else if (preivousYear.equals("2024") && previousSemester.equals("Spring")) {
                            String updateQuery = "UPDATE stdinfo SET stdSemester = ?, stdYear = ? WHERE stdId = ?";
                            PreparedStatement statementForUpdate = connection.prepareStatement(updateQuery);
                            statementForUpdate.setString(1, "Fall");
                            statementForUpdate.setString(2, "2024");
                            statementForUpdate.setString(3, studentIdRes);
                            statementForUpdate.executeUpdate();

                        } else if (preivousYear.equals("2024") && previousSemester.equals("Fall")) {
                            String updateQuery = "UPDATE stdinfo SET stdSemester = ?, stdYear = ? WHERE stdId = ?";
                            PreparedStatement statementForUpdate = connection.prepareStatement(updateQuery);
                            statementForUpdate.setString(1, "Spring");
                            statementForUpdate.setString(2, "2025");
                            statementForUpdate.setString(3, studentIdRes);
                            statementForUpdate.executeUpdate();
                        } else if (preivousYear.equals("2025") && previousSemester.equals("Spring")) {
                           String updateQuery = "UPDATE stdinfo SET stdSemester = ?, stdYear = ? WHERE stdId = ?";
                            PreparedStatement statementForUpdate = connection.prepareStatement(updateQuery);
                            statementForUpdate.setString(1, "Fall");
                            statementForUpdate.setString(2, "2025");
                            statementForUpdate.setString(3, studentIdRes);
                            statementForUpdate.executeUpdate();

                        } else if (preivousYear.equals("2025") && previousSemester.equals("Fall")) {
                           String updateQuery = "UPDATE stdinfo SET stdSemester = ?, stdYear = ? WHERE stdId = ?";
                            PreparedStatement statementForUpdate = connection.prepareStatement(updateQuery);
                            statementForUpdate.setString(1, "Spring");
                            statementForUpdate.setString(2, "2026");
                            statementForUpdate.setString(3, studentIdRes);
                            statementForUpdate.executeUpdate();

                        } else if (preivousYear.equals("2026") && previousSemester.equals("Spring")) {
                           String updateQuery = "UPDATE stdinfo SET stdSemester = ?, stdYear = ? WHERE stdId = ?";
                            PreparedStatement statementForUpdate = connection.prepareStatement(updateQuery);
                            statementForUpdate.setString(1, "Fall");
                            statementForUpdate.setString(2, "2026");
                            statementForUpdate.setString(3, studentIdRes);
                            statementForUpdate.executeUpdate();
                        } else if (preivousYear.equals("2026") && previousSemester.equals("Fall")) {
                            String updateQuery = "UPDATE stdinfo SET stdSemester = ?, stdYear = ? WHERE stdId = ?";
                            PreparedStatement statementForUpdate = connection.prepareStatement(updateQuery);
                            statementForUpdate.setString(1, "Spring");
                            statementForUpdate.setString(2, "2027");
                            statementForUpdate.setString(3, studentIdRes);
                            statementForUpdate.executeUpdate();
                        }

                    }
                   
                }
                
                String deleteQueryFromIntake = "DELETE FROM intake WHERE stdId = ?";
                PreparedStatement deleteStatementForIntake = connection.prepareStatement(deleteQueryFromIntake);
                deleteStatementForIntake.setString(1, studentId);
                deleteStatementForIntake.executeUpdate();

                String deleteQueryFromDemand = "DELETE FROM demand WHERE stdId = ?";
                PreparedStatement deleteStatementFordemand = connection.prepareStatement(deleteQueryFromDemand);
                deleteStatementFordemand.setString(1, studentId);
                deleteStatementFordemand.executeUpdate();

                
            }
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        

    }//GEN-LAST:event_addResultBtnActionPerformed

    /**
     *
     * @param args the command line arguments
     *
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">

        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.

         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 

         */
        try {

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {

                if ("Nimbus".equals(info.getName())) {

                    javax.swing.UIManager.setLookAndFeel(info.getClassName());

                    break;

                }

            }

        } catch (ClassNotFoundException ex) {

            java.util.logging.Logger.getLogger(AddResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {

            java.util.logging.Logger.getLogger(AddResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {

            java.util.logging.Logger.getLogger(AddResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {

            java.util.logging.Logger.getLogger(AddResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }

        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddResult().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addResultBtn;
    private javax.swing.JLabel backBtn;
    private javax.swing.JLabel deleteStudentText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel logOutBtn1;
    private javax.swing.JLabel searchBtn;
    private javax.swing.JTextField searchStdId;
    private javax.swing.JPanel searchStudentBtn;
    private javax.swing.JTextField subjectFive;
    private javax.swing.JTextField subjectFiveCredit;
    private javax.swing.JTextField subjectFiveMark;
    private javax.swing.JTextField subjectFour;
    private javax.swing.JTextField subjectFourCredit;
    private javax.swing.JTextField subjectFourMark;
    private javax.swing.JTextField subjectOne;
    private javax.swing.JTextField subjectOneCredit;
    private javax.swing.JTextField subjectOneMark;
    private javax.swing.JTextField subjectSeven;
    private javax.swing.JTextField subjectSevenCredit;
    private javax.swing.JTextField subjectSevenMark;
    private javax.swing.JTextField subjectSix;
    private javax.swing.JTextField subjectSixCredit;
    private javax.swing.JTextField subjectSixMark;
    private javax.swing.JTextField subjectThree;
    private javax.swing.JTextField subjectThreeCredit;
    private javax.swing.JTextField subjectThreeMark;
    private javax.swing.JTextField subjectTwo;
    private javax.swing.JTextField subjectTwoCredit;
    private javax.swing.JTextField subjectTwoMark;
    // End of variables declaration//GEN-END:variables

}
